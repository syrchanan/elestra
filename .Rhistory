library(zoo)
library(quantmod)
library(janitor)
library(PerformanceAnalytics)
sdate <- as.Date("2017-01-01")
edate <- Sys.Date()
getSymbols("SPY", from=sdate, to=edate)
sma50 <- SMA(Cl(SPY), 50)
sma100 <- SMA(Cl(SPY), 100)
sma200 <- SMA(Cl(SPY), 200)
sig <- Lag(ifelse(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA, 1, -1))
ret <- ROC(Cl(SPY))*sig
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
library(tidyverse)
library(zoo)
library(quantmod)
library(janitor)
library(PerformanceAnalytics)
sdate <- as.Date("2017-01-01")
edate <- Sys.Date()
getSymbols("SPY", from=sdate, to=edate)
sma50 <- SMA(Cl(SPY), 50)
sma100 <- SMA(Cl(SPY), 100)
sma200 <- SMA(Cl(SPY), 200)
sig <- Lag(ifelse(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA, 1, -1))
ret <- ROC(Cl(SPY))*sig
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
SPY <- na.omit(SPY)
sma50 <- SMA(Cl(SPY), 50)
sma100 <- SMA(Cl(SPY), 100)
sma200 <- SMA(Cl(SPY), 200)
sig <- Lag(ifelse(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA, 1, -1))
ret <- ROC(Cl(SPY))*sig
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
sig <- Lag(case_when(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA ~ 1,
sma200$SMA > sma100$SMA & sma100$SMA > sma50$SMA ~ -1,
TRUE ~ 0))
ret <- ROC(Cl(SPY))*sig
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
temp <- na.omit(SPY)
sma50 <- SMA(Cl(temp), 50)
sma100 <- SMA(Cl(temp), 100)
sma200 <- SMA(Cl(temp), 200)
sig <- Lag(case_when(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA ~ 1,
sma200$SMA > sma100$SMA & sma100$SMA > sma50$SMA ~ -1,
TRUE ~ 0))
ret <- ROC(Cl(temp))*sig
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
sdate <- as.Date("1994-01-01")
edate <- Sys.Date()
getSymbols("SPY", from=sdate, to=edate)
temp <- na.omit(SPY)
sma50 <- SMA(Cl(temp), 50)
sma100 <- SMA(Cl(temp), 100)
sma200 <- SMA(Cl(temp), 200)
sig <- Lag(case_when(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA ~ 1,
sma200$SMA > sma100$SMA & sma100$SMA > sma50$SMA ~ -1,
TRUE ~ 0))
ret <- ROC(Cl(temp))*sig
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
View(temp)
View(ret)
ret %>%
as_tibble() %>%
View()
ret %>%
as_tibble() %>%
clean_names() %>% View()
total <- 1000
ret %>%
as_tibble() %>%
clean_names() %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total + total*spy_close) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) -> test
cumsum(test$balance)
sum(test$balance)
sum(drop_na(test$balance))
View(test)
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice[2:] %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice[2:n] %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice[1] %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(1) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(2:) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(2:n) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(!1) %>% View()
?slice
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(1:n()) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(2:n()) %>% View()
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = total*spy_close) %>%
slice(2:n()) -> test_balance
sum(test_balance$balance)
sum(test_balance$balance) + total
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = 0) -> test
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = 0) %>%
slice(2:n()) -> test
View(test)
for (i in 1:length(test)) {
if (i == 1) {
test$balance = 1000
} else {
test$balance = lag(test$balance)*test$spy_close + lag(test$balance)
}
}
View(test)
for (i in 1:length(test)) {
if (i == 1) {
test$balance = 1000
} else {
test$balance[i] = lag(test$balance[i])*test$spy_close[i] + lag(test$balance[i])
}
}
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = 0) %>%
slice(2:n()) -> test
for (i in 1:length(test)) {
if (i == 1) {
test$balance = 1000
} else {
test$balance[i] = lag(test$balance[i])*test$spy_close[i] + lag(test$balance[i])
}
}
View(test)
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = 0) %>%
slice(2:n()) -> test
for (i in 1:length(test)) {
if (i == 1) {
test$balance = 1000
} else {
test$balance[i] = test$balance[i-1]*test$spy_close[i] + test$balance[i-1]
}
}
View(test)
View(test_balance)
total <- 1000
balance <- 1000
ret %>%
as_tibble() %>%
clean_names() %>%
mutate(balance = 0) %>%
slice(2:n()) -> test
total <- 1000
for (i in 1:length(test)) {
total <- test$spy_close[i]*total + total
}
i=3500
total <- test$spy_close[i]*total + total
total <- 1000
for (i in 1:length(test)) {
total <- test$spy_close[i]*total + total
}
list = c()
for (i in 1:length(test)) {
total <- test$spy_close[i]*total + total
append(list, total)
}
ret %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
for (i in 1:length(test)) {
total <- test$spy_close[i]*total + total
append(list, total)
}
list = c()
for (i in 1:length(test)) {
total <- test$spy_close[i]*total + total
append(list, total)
}
for (i in 1:length(test)) {
total <- total + total
append(list, total)
}
length(test)
View(test)
ret %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
length(test)
nrow(test)
total <- 1000
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total + total
}
ret %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
tracker <- c()
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total + total
tracker <- append(tracker, total)
}
tracker
ret %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
tracker <- c()
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total*.1 + total
tracker <- append(tracker, total)
}
ret %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
tracker <- c()
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total + total
tracker <- append(tracker, total)
}
library(quantmod)
options("getSymbols.warning4.0" = FALSE,
"getSymbols.auto.assign" = FALSE)
SPY <- suppressWarnings((
getSymbols("SPY", from = "1994-01-01")
))
SPY <- as.numeric((SPY$SPY.Close))
t <- 1:(length(SPY)-1)
Vt <- c(rep(10000, length(t)))
Rb <- rep(NA, length(t))
for (i in 2:length(t)) { Rb[i] <- (SPY[i] / SPY[i-1]) - 1}
Eb <- rep(NA, length(t))
Eb[1] <- Vt[1]
for(i in 2:length(t)) { Eb[i] <- Eb[i-1] * (1 + Rb[i]) }
Rt <- rep(NA, length(t))
for(i in 2:length(t)){
Rt[i] <- Rb[i] + rnorm(n = 1,
mean = 0.24/length(t),
sd = 2.5 * sd(Rb, na.rm = TRUE))
}
# Randomly Simulated Return Series 2
Rt2 <- rep(NA, length(t))
for(i in 2:length(t)){
Rt2[i] <- Rb[i] + rnorm(n = 1,
mean = 0.02/length(t),
sd = .75 * sd(Rb, na.rm = TRUE))
}
# Randomly Simulated Equity Curve 1
Et <- rep(NA, length(t))
Et <- Vt[1]
for(i in 2:length(t)) { Et[i] <- Et[i-1] * (1 + Rt[i]) }
# Randomly Simulated Equity Curve 2
Et2 <- rep(NA, length(t))
Et2 <- Vt[1]
for(i in 2:length(t)) { Et2[i] <- Et2[i-1] * (1 + Rt2[i]) }
# Plot of Et1 against the SPY Portfolio
plot(y = Et, x = t, type = "l", col = 1,
xlab = "Time",
ylab= "Equity ($)",
main = "Figure 1â€“3: Randomly Generated Equity Curves")
grid()
abline(h = 10000)
lines(y = Et2, x = t, col = 2)
lines(y = Eb, x = t, col = 8)
legend(x = "topleft", col = c(1,2,8), lwd = 2, legend = c("Curve 1",
"Curve 2",
"SPY"))
SPY <- suppressWarnings((
getSymbols("SPY", from = "1994-01-01")
))
SPY <- as.numeric((SPY$SPY.Close))
rm(list = ls())
library(quantmod)
options("getSymbols.warning4.0" = FALSE,
"getSymbols.auto.assign" = FALSE)
SPY <- suppressWarnings((
getSymbols("SPY", from = "1994-01-01")
))
SPY <- as.numeric((SPY$SPY.Close))
SPY <- suppressWarnings((
getSymbols("SPY", from = "1994-01-01")
))
View(SPY)
library(tidyverse)
library(zoo)
library(quantmod)
library(janitor)
library(PerformanceAnalytics)
sdate <- as.Date("1994-01-01")
edate <- Sys.Date()
getSymbols("SPY", from=sdate, to=edate)
temp <- na.omit(SPY)
sma50 <- SMA(Cl(temp), 50)
sma100 <- SMA(Cl(temp), 100)
sma200 <- SMA(Cl(temp), 200)
signal <- Lag(case_when(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA ~ 1,
sma200$SMA > sma100$SMA & sma100$SMA > sma50$SMA ~ -1,
TRUE ~ 0))
return <- ROC(Cl(temp))*signal
table.Drawdowns(return, top=10)
table.DownsideRisk(return)
charts.PerformanceSummary(return)
return %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
tracker <- c()
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total + total
tracker <- append(tracker, total)
}
library(tidyverse)
library(zoo)
library(quantmod)
library(janitor)
library(PerformanceAnalytics)
sdate <- as.Date("1994-01-01")
edate <- Sys.Date()
getSymbols("SPY", from=sdate, to=edate)
temp <- na.omit(SPY)
sma50 <- SMA(Cl(temp), 50)
sma100 <- SMA(Cl(temp), 100)
sma200 <- SMA(Cl(temp), 200)
signal <- Lag(case_when(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA ~ 1,
sma200$SMA > sma100$SMA & sma100$SMA > sma50$SMA ~ -1,
TRUE ~ 0))
return <- ROC(Cl(temp))*signal
table.Drawdowns(return, top=10)
table.DownsideRisk(return)
charts.PerformanceSummary(return)
return %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
tracker <- c()
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total + total
tracker <- append(tracker, total)
}
t <- 1:length(tracker)
t %>%
bind_cols(tracker) %>% View()
t %>%
bind_cols(tracker) %>%
ggplot() +
geom_line(aes(t, tracker))
library(tidyverse)
library(zoo)
library(quantmod)
library(janitor)
library(PerformanceAnalytics)
sdate <- as.Date("1994-01-01")
edate <- Sys.Date()
getSymbols("SPY", from=sdate, to=edate)
temp <- na.omit(SPY)
sma50 <- SMA(Cl(temp), 50)
sma100 <- SMA(Cl(temp), 100)
sma200 <- SMA(Cl(temp), 200)
signal <- Lag(case_when(sma50$SMA > sma100$SMA & sma100$SMA > sma200$SMA ~ 1,
sma200$SMA > sma100$SMA & sma100$SMA > sma50$SMA ~ -1,
TRUE ~ 0))
return <- ROC(Cl(temp))*signal
table.Drawdowns(return, top=10)
table.DownsideRisk(return)
charts.PerformanceSummary(return)
return %>%
as_tibble() %>%
clean_names() %>%
slice(2:n()) -> test
total <- 1000
tracker <- c()
for (i in 1:nrow(test)) {
total <- test$spy_close[i]*total + total
tracker <- append(tracker, total)
}
library(tidyverse)
library(skimr)
turnout <- read_csv("turnout_data.csv")
skim(turnout)
library(rvest)
library(usmap)
# fips <- read_html("https://www.nrcs.usda.gov/wps/portal/nrcs/detail/national/home/?cid=nrcs143_013697") %>%
#   html_table()
#
# states <- fips[21]
#
# counties <- as.data.frame(states)
#
# write_csv(counties, "county_fips.csv")
library(janitor)
county_fips <- read_csv("county_fips.csv")
ny_fips <- county_fips %>%
clean_names() %>%
filter(state == "NY") %>%
mutate(name = case_when(
name == "St Lawrence" ~ "St. Lawrence",
TRUE ~ name
))
fips_turnout <- turnout %>%
left_join(ny_fips, by = c("county" = "name"))
fips_2018 <- fips_turnout %>%
filter(year == 2018) %>%
mutate(turnout_18 = turnout) %>%
select(-turnout)
fips_2014 <- fips_turnout %>%
filter(year == 2014) %>%
mutate(turnout_14 = turnout) %>%
select(-turnout)
fips_mid_pct <- fips_2018 %>%
inner_join(fips_2014, by = c("county" = "county")) %>%
mutate(delta = (turnout_18-turnout_14)/turnout_14,
delta = delta*100) %>%
select(1:4, delta) %>%
rename("year" = "year.x",
"cycle" = "cycle.x",
"fips" = "fips.x")
plot_usmap(regions = "counties", include = c("NY"), data = fips_mid_pct, values = "delta") +
scale_fill_viridis_c(name = "% Change") +
theme(legend.position = "right") +
labs(title = "Percent Change in Voter Turnout",
subtitle = "2018 midterms v. 2014 midterms")
#Seneca and St. Lawrence Counties dropped by 50%
#Schenectady incr. by 400% - 5 boroughs of NY incr. by 100+%
options(scipen = 999)
fips_turnout %>%
filter(county == "Onondaga") %>%
mutate(cycle = factor(cycle, levels = c("pres", "mid", "off"))) %>%
ggplot(aes(year, turnout, fill = cycle)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("#c41a1a", "#1c53d4", "#666666"), name = "Election Cycle",
labels = c("Presidential", "Midterm", "Off")) +
labs(title = "Turnout in Onondaga County",
subtitle = "2012 - 2021") +
ylab("Voter Turnout") +
xlab("Year")
install.packages("bookdown")
setwd("C:\Users\cdawg\git_repos\elestra")
setwd("C:/Users/cdawg/git_repos/elestra")
install.packages("bookdown")
library(bookdown)
render_book()
render_book()
